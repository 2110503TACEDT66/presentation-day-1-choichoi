@startuml Manage Shop (PUT)

header Sameple VacQ Sequence Diagram
footer Page %page% of %lastpage%
title "Manage Shop (PUT)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:shops" as routerShops
participant "<<middleware>>\n:auth" as middleware
participant "<<controllers>>\n:shops" as controllersShops
participant "<<model>>\n:Shop" as modelShop
participant "<<model>>\n:reservations" as modelReservation
database "<<MongoDB>>\n:shops" as ShopsDatabase

client->server ++:req.put('/shops/:id')
server->routerShops ++:app.use('/shops',shops)
routerShops->middleware ++:protect()
return
routerShops->middleware ++:authorize("admin","shopkeeper")
return
routerShops -> controllersShops ++:updateShop()
controllersShops->modelShop ++:findById(req.params.id)
controllersShops <-- modelShop --:shop
controllersShops->modelReservation ++:find({shop:shop.id});
controllersShops <-- modelReservation --:reservation
alt reservation is empty
    alt user.manageShop=shop.id
        controllersShops->modelShop ++:findByIdAndUpdate(req.params.id, req.body)
    else user.role = "admin"
        controllersShops->modelShop ++:findByIdAndUpdate(req.params.id, req.body)
    end
end
modelShop ->ShopsDatabase ++: ShopSchema
ShopsDatabase --> modelShop --: shop
controllersShops <-- modelShop --:shop
controllersShops->client --:response

@enduml
