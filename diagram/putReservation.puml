@startuml Manage Reservation (PUT)

header Sameple VacQ Sequence Diagram
footer Page %page% of %lastpage%
title "Manage Reservation (PUT)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:reservations" as routerReservations
participant "<<middleware>>\n:auth" as middleware
participant "<<controllers>>\n:reservations" as controllersReservations
participant "<<model>>\n:Reservation" as modelReservation
database "<<MongoDB>>\n:reservations" as ReservationsDatabase

client->server ++:req.put('/reservations/:id')
server->routerReservations ++:app.use('/reservations',reservations)
routerReservations->middleware ++:protect()
return
routerReservations -> controllersReservations ++:updateReservation()
controllersReservations->modelReservation ++:findById(req.params.id)
controllersReservations <-- modelReservation --:reservation
alt user.id=reservation.user
    controllersReservations->modelReservation ++:findByIdAndUpdate(req.params.id,req.body)
    note left
        update own reservations
    end note
else user.manageShop=reservation.shop
    controllersReservations->modelReservation ++:findByIdAndUpdate(req.params.id,req.body)
    note left
        update own shop's reservations
    end note
else user.role=admin
    controllersReservations->modelReservation ++:findByIdAndUpdate(req.params.id,req.body)
    note left
        update any reservations
    end note
end
modelReservation ->ReservationsDatabase ++: ReservationSchema
ReservationsDatabase --> modelReservation --: reservation
controllersReservations <-- modelReservation --:reservation
controllersReservations->client --:response

@enduml
